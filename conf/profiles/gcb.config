/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Google Cloud Batch (GCB) Configuration Profile
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Based on proven production GCB configuration
    Uses Google Batch executor with optimized settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// Process executor configuration
process.executor = 'google-batch'

// Work directory - Google Cloud Storage bucket for staging
workDir = params.gcp_work_dir ?: 'gs://your-bucket/nextflow_work'

// Include base configuration
includeConfig "../base.config"

// Google Batch configuration
batch {
    // Mount Google Cloud Storage buckets
    volumes = params.batch_volumes ?: []
    
    // Enable comprehensive logging
    logsPolicy = 'ENABLED'
    
    // Use spot instances for cost savings
    spot = params.use_preemptible ?: true
    
    // Boot disk configuration
    bootDiskSize = params.boot_disk_size ?: '20 GB'
    bootDiskType = params.disk_type ?: 'pd-standard'
    
    // Network configuration
    network = params.gcp_network ?: 'default'
    subnetwork = params.gcp_subnetwork ?: null
    usePrivateAddress = params.use_private_address ?: false
    
    // Service account
    serviceAccountEmail = params.gcp_service_account ?: null
    
    // CPU platform (optional)
    cpuPlatform = params.cpu_platform ?: null
    
    // Debugging
    debug = params.debug_mode ?: false
}

// Google Cloud Platform settings
google {
    project = params.gcp_project ?: System.getenv('GOOGLE_CLOUD_PROJECT')
    region = params.gcp_region ?: 'us-central1'
    options = params.gcp_labels ?: '--labels=workflow=bacterial-genomics,env=prod'
}

// Container configuration
docker {
    enabled = true
    fixOwnership = true
    runOptions = '-u $(id -u):$(id -g)'
}

singularity {
    enabled = false
}

// Enhanced logging and debugging
trace {
    enabled = true
    overwrite = true
    fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes,env,workdir,script,scratch,error_action'
}

timeline {
    enabled = true
    overwrite = true
}

report {
    enabled = true
    overwrite = true
}

dag {
    enabled = true
    overwrite = true
}

// Process-specific optimizations for Google Batch
process {
    // Default minimal resources for cost optimization
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
    disk = '20 GB'
    
    // Enhanced error handling and retry strategy
    errorStrategy = { 
        if (task.exitStatus in [3,4,104,134,137,139,140,143,247,255]) {
            log.warn "Retrying task ${task.name} due to exit status ${task.exitStatus}"
            return 'retry'
        } else if (task.exitStatus in [1,2]) {
            log.info "Ignoring task ${task.name} with exit status ${task.exitStatus}"
            return 'ignore'
        } else {
            log.error "Task ${task.name} failed with exit status ${task.exitStatus}"
            return 'finish'
        }
    }
    maxRetries = params.aggressive_retry ? 5 : 3
    maxErrors = 10
    
    // Machine type optimization for different process labels
    withLabel:process_single {
        cpus = 1
        memory = '2 GB'
        time = '1 h'
        machineType = 'e2-small'
        disk = '10 GB'
    }
    
    withLabel:process_low {
        cpus = 2
        memory = '4 GB'
        time = '2 h'
        machineType = 'e2-standard-2'
        disk = '20 GB'
    }
    
    withLabel:process_medium {
        cpus = 4
        memory = '8 GB'
        time = '4 h'
        machineType = 'e2-standard-4'
        disk = '50 GB'
    }
    
    withLabel:process_high {
        cpus = 8
        memory = '16 GB'
        time = '8 h'
        machineType = 'e2-standard-8'
        disk = '100 GB'
    }
    
    withLabel:process_high_memory {
        cpus = 4
        memory = '32 GB'
        time = '8 h'
        machineType = 'e2-highmem-4'
        disk = '100 GB'
    }
    
    // Optimized Gubbins configuration
    withName:RECOMBINATION_GUBBINS {
        cpus = { params.gubbins_cpus ?: 4 }
        memory = { params.gubbins_memory ?: '16 GB' }
        time = { params.gubbins_time ?: '6 h' }
        machineType = 'c2-standard-4'  // Compute-optimized for CPU-intensive tasks
        disk = '100 GB'
        
        // Enhanced retry strategy for Gubbins
        errorStrategy = { 
            if (task.exitStatus == 137) {  // Out of memory
                log.warn "Gubbins OOM detected for ${task.tag}, retrying with more memory"
                return 'retry'
            } else if (task.exitStatus in [134,139,143]) {  // Other memory/compute issues
                log.warn "Gubbins compute issue for ${task.tag}, retrying"
                return 'retry'
            } else if (task.exitStatus == 1) {  // General error
                log.warn "Gubbins general error for ${task.tag}, retrying with conservative settings"
                return 'retry'
            } else {
                return 'finish'
            }
        }
        maxRetries = 3
        
        // Resource scaling based on attempt
        memory = { 
            if (task.attempt == 1) {
                params.gubbins_memory ?: '16 GB'
            } else if (task.attempt == 2) {
                '32 GB'
            } else {
                '64 GB'
            }
        }
        
        cpus = {
            if (task.attempt == 1) {
                params.gubbins_cpus ?: 4
            } else {
                Math.min(params.gubbins_cpus ?: 4, 8)
            }
        }
    }
    
    // ClonalFrameML optimization (alternative to Gubbins)
    withName:RECOMBINATION_CLONALFRAMEML {
        cpus = 2
        memory = '8 GB'
        time = '4 h'
        machineType = 'e2-standard-2'
        disk = '50 GB'
    }
    
    // ParSNP optimization
    withName:CORE_GENOME_ALIGNMENT_PARSNP {
        cpus = { params.parsnp_cpus ?: 4 }
        memory = { params.parsnp_memory ?: '8 GB' }
        time = '4 h'
        machineType = 'c2-standard-4'
        disk = '100 GB'
    }
}

// Workflow introspection and debugging
// Note: workflow.onError and workflow.onComplete handlers are defined in the main workflow script}